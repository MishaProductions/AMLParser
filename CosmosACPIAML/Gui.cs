using Cosmos.System.Graphics.Fonts;
using Cosmos.System.Graphics;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using CosmosACPIAMl;

namespace CosmosACPIAML
{
    public class VBEConsole : Console
    {

        public Graphics graphics;


        public VBEConsole()
        {
            graphics = new Graphics();

            Name = graphics.canvas.Name();
            Type = ConsoleType.Graphical;

            mWidth = graphics.canvas.Mode.Columns;
            mHeight = graphics.canvas.Mode.Rows;

            mCols = graphics.canvas.Mode.Columns / graphics.font.Width;
            mRows = graphics.canvas.Mode.Rows / graphics.font.Height;
        }

        protected int mX = 0;
        public override int X
        {
            get { return mX; }
            set
            {
                mX = value;
                UpdateCursor();
            }
        }


        protected int mY = 0;
        public override int Y
        {
            get { return mY; }
            set
            {
                mY = value;
                UpdateCursor();
            }
        }

        public static int mWidth;
        public override int Width
        {
            get { return mWidth; }
        }

        public static int mHeight;
        public override int Height
        {
            get { return mHeight; }
        }

        public static int mCols;
        public override int Cols
        {
            get { return mCols; }
        }

        public static int mRows;
        public override int Rows
        {
            get { return mRows; }
        }

        public static uint foreground = (byte)ConsoleColor.White;
        public override ConsoleColor Foreground
        {
            get { return (ConsoleColor)foreground; }
            set
            {
                foreground = (byte)global::System.Console.ForegroundColor;
                graphics.ChangeForegroundPen(foreground);
            }
        }

        public static uint background = (byte)ConsoleColor.Black;

        public override ConsoleColor Background
        {
            get { return (ConsoleColor)background; }
            set
            {
                background = (byte)global::System.Console.BackgroundColor;
                graphics.ChangeBackgroundPen(background);
            }
        }

        public override int CursorSize { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }

        public static bool cursorvisible = false;
        public override bool CursorVisible { get => cursorvisible; set => cursorvisible = value; }

        public override void Clear()
        {
            graphics.canvas.Clear();
            mX = 0;
            mY = 0;
            UpdateCursor();
        }

        public override void Clear(uint color)
        {
            graphics.canvas.Clear(Color.FromArgb((int)color));
            mX = 0;
            mY = 0;
            UpdateCursor();
        }

        public override void UpdateCursor()
        {
            graphics.SetCursorPos(mX, mY);
        }

        /// <summary>
        /// Scroll the console up and move crusor to the start of the line.
        /// </summary>
        private void DoLineFeed()
        {
            mY++;
            mX = 0;
            if (mY == mRows)
            {
                //graphics.canvas.ScrollUp();
                mY--;
            }
            UpdateCursor();
        }

        private void DoCarriageReturn()
        {
            mX = 0;
            UpdateCursor();
        }

        /// <summary>
        /// Write char to the console.
        /// </summary>
        /// <param name="aChar">A char to write</param>
        public void Write(char aChar)
        {
            if (aChar == 0)
                return;

            graphics.WriteByte(aChar);
            mX++;
            if (mX == mCols)
            {
                DoLineFeed();
            }
            UpdateCursor();
        }

        public override void Write(char[] aText)
        {
            for (int i = 0; i < aText.Length; i++)
            {
                switch (aText[i])
                {
                    case LineFeed:
                        DoLineFeed();
                        break;

                    case CarriageReturn:
                        DoCarriageReturn();
                        break;

                    case Tab:
                        DoTab();
                        break;

                    /* Normal characters, simply write them */
                    default:
                        Write(aText[i]);
                        break;
                }
            }
        }

        public override void Write(byte[] aText)
        {
            throw new NotImplementedException();
        }

        private void DoTab()
        {
            Write(Space);
            Write(Space);
            Write(Space);
            Write(Space);
        }

        public override void DrawImage(ushort X, ushort Y, Bitmap image)
        {
            graphics.canvas.DrawImage(image, X, Y);
        }
    }
    public class Graphics
    {
        public Canvas canvas;

        public PCScreenFont font;

        private static uint[] Pallete = new uint[16];

        public Graphics()
        {
            canvas = FullScreenCanvas.GetFullScreenCanvas();

            font = PCScreenFont.LoadFont(Convert.FromBase64String(""));

            Pallete[0] = 0xFF000000; // Black
            Pallete[1] = 0xFF0000AB; // Darkblue
            Pallete[2] = 0xFF008000; // DarkGreen
            Pallete[3] = 0xFF008080; // DarkCyan
            Pallete[4] = 0xFF800000; // DarkRed
            Pallete[5] = 0xFF800080; // DarkMagenta
            Pallete[6] = 0xFF808000; // DarkYellow
            Pallete[7] = 0xFFC0C0C0; // Gray
            Pallete[8] = 0xFF808080; // DarkGray
            Pallete[9] = 0xFF5353FF; // Blue
            Pallete[10] = 0xFF55FF55; // Green
            Pallete[11] = 0xFF00FFFF; // Cyan
            Pallete[12] = 0xFFAA0000; // Red
            Pallete[13] = 0xFFFF00FF; // Magenta
            Pallete[14] = 0xFFFFFF55; // Yellow
            Pallete[15] = 0xFFFFFFFF; //White

            frontpen = new Pen(Color.FromArgb((int)Pallete[VBEConsole.foreground]));
            backpen = new Pen(Color.FromArgb((int)Pallete[VBEConsole.background]));

            lastpen = backpen;
            lastx = 0;
            lasty = font.Height;
        }

        public Pen frontpen;
        public Pen backpen;

        public void DrawFilledRectangle(Pen pen, int x_start, int y_start, int width, int height)
        {
            if (height == -1)
            {
                height = width;
            }

            for (int y = y_start; y < y_start + height; y++)
            {
                canvas.DrawLine(pen, x_start, y, x_start + width + 1, y);
            }
        }

        public void WriteByte(char ch)
        {
            DrawFilledRectangle(backpen, Kernel.AConsole.X * font.Width + 1, Kernel.AConsole.Y * font.Height, font.Width - 1, font.Height);

            canvas.DrawChar((char)ch, font, frontpen, Kernel.AConsole.X * font.Width, Kernel.AConsole.Y * font.Height);
        }

        public void ChangeForegroundPen(uint foreground)
        {
            frontpen = new Pen(Color.FromArgb((int)Pallete[foreground]));
        }

        public void ChangeBackgroundPen(uint background)
        {
            backpen = new Pen(Color.FromArgb((int)Pallete[background]));
        }

        //public void ScrollUp()
        //{
        //    canvas.ScrollUp();
        //}

        public Pen lastpen;
        public int lastx;
        public int lasty;

        public void SetCursorPos(int mX, int mY)
        {
            if (Kernel.AConsole.CursorVisible)
            {
                DrawFilledRectangle(lastpen, lastx, lasty, 8, 4);
                DrawFilledRectangle(frontpen, mX * font.Width, mY * font.Height + font.Height, 8, 4);

                lastx = mX * font.Width;
                lasty = mY * font.Height + font.Height;
                lastpen = backpen;
            }
        }
    }
}
